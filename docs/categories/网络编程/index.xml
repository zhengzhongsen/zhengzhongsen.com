<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络编程 on 郑仲森的个人博客</title>
    <link>/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 网络编程 on 郑仲森的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 May 2021 19:07:46 +0800</lastBuildDate><atom:link href="/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>阻塞性socket的读写超时处理</title>
      <link>/tech/2021/%E9%98%BB%E5%A1%9E%E6%80%A7socket%E7%9A%84%E8%AF%BB%E5%86%99%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 16 May 2021 19:07:46 +0800</pubDate>
      
      <guid>/tech/2021/%E9%98%BB%E5%A1%9E%E6%80%A7socket%E7%9A%84%E8%AF%BB%E5%86%99%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86/</guid>
      <description>1. 读写接口可能永远阻塞吗 对于 TCP socket 而言，write 和 read 有可能永远阻塞吗？答案是两个接口都有可能会导致永远阻塞。
 对于阻塞性的 TCP socket 而言，write 只是将用户态的数据复制到内核态的发送缓冲区中，只要写成功了，就立即返回。如果发送缓冲区满了，则将会阻塞在 write 函数，直到超时返回错误（如果设置了写超时时间）或者永远阻塞住； 而对于 read 接口，如果读取不到指定长度的数据，会一直等待下去，直到全部读取到，或者出现了其他错误。  如何避免阻塞性socket 可能造成的永久阻塞呢？一种比较常用的处理方法，给读写接口加上超时限制。
 通过 setsockopt 设置 socket 的读写超时 SO_SNDTIMEO 和 SO_RCVTIMEO 对 write 和 read 接口进行封装，避免因为信号中断导致的系统调用接口提前返回失败。一般系统调用被信号中断后，会返回失败 EINTR，如果这时候重新调用读写接口，相应的超时时间会重新开始计算。  通过查看 man 7 signal 的相关帮助文档，可以查看不同系统调用对信号中断场景的响应效果。比如，如果阻塞性 socket 设置了 SO_RCVTIMEO 超时时间，当 recv 被信号中断，则会立即返回 EINTR 错误。如果这时候重新调用 recv 接口，则会重新计算超时时间。
2. recvn的实现 对于信号中断下的 recvn 处理，有两种实现。第一种实现，适用于中断信号是偶然出现的场景，出现信号中断，再重新尝试即可，这也是比较常见的处理方式。
ssize_t recvn(int sockfd, void *buf, size_t len, int flags) { ssize_t left = len; ssize_t has_read = 0; char *ptr = buf; while (left &amp;gt; 0) { has_read = recv(sockfd, ptr, left, flags); if (has_read &amp;lt; 0) { if (errno == EINTR) { continue; } break; } if (has_read == 0) { break; } left -= has_read; ptr += has_read; } return len - left; } 上面讲的第一种实现，不能适用于那种定时产生信号，而且时间间隔小于recv设置的超时时间的使用场景，这样子 recv 会每次都被中断返回错误，导致永远不会超时。我们需要在 recv 返回时判断总花费时间是否超过了限制。下面的实现比较超时时间的精确度比较低，如果要实现比较精确的超时时间，在每次 recv 返回时，可以重新设置 recv 的超时时间。</description>
    </item>
    
  </channel>
</rss>
